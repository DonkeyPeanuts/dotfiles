filetype off

""""""""""""""""""""
"  Initialization  "
""""""""""""""""""""

" dein 設定
if &compatible
    set nocompatible
endif

let s:dein_dir = expand('~/.cache/dein')
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'

if &runtimepath !~# '/dein.vim'
    if !isdirectory(s:dein_repo_dir)
        execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repo_dir
    endif
    execute 'set runtimepath^=' . s:dein_repo_dir
endif

if dein#load_state(s:dein_dir)
    call dein#begin(s:dein_dir)
    let s:toml = '~/.dein.toml'
    let s:lazy_toml = '~/.dein_lazy.toml'
    call dein#load_toml(s:toml, {'lazy': 0})
    call dein#load_toml(s:lazy_toml, {'lazy': 1})

    let g:dein#install_process_timeout =  600
    if has('job') && has('channel') && has('timers')
      call dein#add('dense-analysis/ale')
    else
      call dein#add('vim-syntastic/syntastic')
    endif
    let g:dein#install_process_timeout =  120

    if ((has('nvim')  || has('timers')) && has('python3')) && system('pip3 show neovim') !=# ''
        call dein#add('Shougo/deoplete.nvim')
        if !has('nvim')
            call dein#add('roxma/nvim-yarp')
            call dein#add('roxma/vim-hug-neovim-rpc')
        endif
    endif

    call dein#end()
    call dein#save_state()
endif

if dein#tap('deoplete.nvim')
  let g:deoplete#enable_at_startup = 1
elseif dein#tap('neocomplete.vim')
  let g:neocomplete#enable_at_startup = 1
endif

if dein#check_install()
    call dein#install()
endif

silent! packadd! cfilter
if !has('nvim')
  packadd! matchit
  runtime ftplugin/man.vim
endif

augroup vimrc
  autocmd!
augroup END

"""""""""""""
"  Editing  "
"""""""""""""
set ff=unix
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,iso-2022-jp,euc-jp,cp932,default,latin1
set fileformats=unix,dos,mac
set backspace=indent,eol,start
set expandtab
set smarttab
set shiftwidth=2
set softtabstop=2
set autoindent
set copyindent
set preserveindent
set formatoptions+=jmB
set omnifunc=syntaxcomplete#Complete
set ambiwidth=double
set statusline=%<%f%=%h%w%y%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%9(\ %m%r\ %)[%4v][%12(\ %5l/%5L%)]
set virtualedit=onemore


" jump to the last known cursor position
au vimrc BufReadPost *
  \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
  \ |   exe "normal! g`\""
  \ | endif

" enable bracketed paste mode
if !has('nvim') && has('patch-8.0.0238') && $TERM =~? 'screen'
  let &t_BE = "\<Esc>[?2004h"
  let &t_BD = "\<Esc>[?2004l"
  exec "set t_PS=\<ESC>[200~ | set t_PE=\<ESC>[201~"
endif

""""""""
"  UI  "
""""""""
set hidden
set colorcolumn=81
set number
set ruler
set showcmd
set noshowmode
set listchars=tab:>\ ,trail:-,nbsp:+
set cmdheight=1
set laststatus=2
set display=lastline
set lazyredraw
set showmatch
set wildmenu
set wildignorecase
set nofoldenable
set title
set mouse=a
set shortmess+=I

"外部で変更のあったファイルは読み直す
set autoread

"現在の行/列の強調
set cursorline
set cursorcolumn

"Escでハイライト消去
nmap <Esc><Esc> :nohlsearch<CR><Esc>

"windowサイズ調整
let g:winresizer_start_key = '<C-E>'

if exists('+inccommand')
  set inccommand=split
endif

" show whitespace errors
hi link WhitespaceError Error
au vimrc Syntax * syn match WhitespaceError /\s\+$\| \+\ze\t/

" colors
if has('gui_running')
  let s:color_level = 2
elseif &t_Co < 256 && $TERM !~? '.*-256color'
  let s:color_level = 0
elseif !has('termguicolors')
  let s:color_level = 1
else
  let s:color_level = 2
  if !has('nvim') && $TERM =~? 'screen'
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  endif
endif

autocmd ColorScheme * highlight Comment ctermfg=245

if s:color_level >=? 2
  set termguicolors
  if exists('+pumblend')
    set pumblend=15 winblend=15
  endif
endif
if s:color_level >=? 1
  set background=dark
  try
    let g:molokai_original = 1
    let g:rehash256 = 1
    colorscheme molokai
    set t_Co=256
  catch /E185:/ " colorscheme doesn't exist
  endtry
endif

" cursor shape
if !has('nvim') && $TERM =~? '\(xterm\|screen\)'
  let &t_SI = "\<Esc>[6 q"
  let &t_SR = "\<Esc>[4 q"
  let &t_EI = "\<Esc>[2 q"
endif

if exists('+inccommand')
  set inccommand=split
endif

" show whitespace errors
hi link WhitespaceError Error
au vimrc Syntax * syn match WhitespaceError /\s\+$\| \+\ze\t/

""""""""""""
"  Search  "
""""""""""""
set incsearch
set hlsearch
set ignorecase
set smartcase
set wrapscan
set tags=./tags;,tags

"""""""""""
"  Cache  "
"""""""""""
if !has('nvim')
  set viminfo+=n~/.cache/vim/viminfo
endif
set dir=~/.cache/vim/swap//
set backup
set backupdir=~/.cache/vim/backup
set undofile
set undodir=~/.cache/vim/undo
for s:d in [&dir, &backupdir, &undodir]
  if !isdirectory(s:d)
    call mkdir(iconv(s:d, &encoding, &termencoding), 'p')
  endif
endfor

"""""""""""""""""
"  Keybindings  "
"""""""""""""""""
"vimでbackspaceを入れても無反応 or Delete状態の時のおまじない
noremap
noremap!

"returnキーで改行
noremap <CR> o<ESC>

let mapleader="\<Space>"
let maplocalleader="\<CR>"
" XXX: Workaround for <Nop> bug in vim/vim#1548, neovim/neovim#6241
nnoremap <Space> \
xnoremap <Space> \

" make Y consistent with C and D
nnoremap Y y$
" make & preserve flags and create a visual mode equivalent
nnoremap & :&&<CR>
xnoremap & :&&<CR>
" break undo before deleting a whole line
inoremap <C-u> <C-g>u<C-u>

" handy mapping for :noh
nnoremap <silent> <BS> :nohlsearch<CR>
" switch to the next modified buffer
nnoremap <silent> <Leader>b :bmodified<CR>
" a more powerful <C-l>
nnoremap <silent> <Leader><C-l> :nohlsearch<CR>:call vimrc#refresh()<CR>

" find merge conflict marker
nnoremap <silent> <Leader>fc /\v^[<=>]{7}( .*<Bar>$)<CR>
xnoremap <silent> <Leader>fc /\v^[<=>]{7}( .*<Bar>$)<CR>
onoremap <silent> <Leader>fc /\v^[<=>]{7}( .*<Bar>$)<CR>
" find whitespace errors
nnoremap <silent> <Leader>f<Space> /\s\+$\<Bar> \+\ze\t<CR>
xnoremap <silent> <Leader>f<Space> /\s\+$\<Bar> \+\ze\t<CR>
onoremap <silent> <Leader>f<Space> /\s\+$\<Bar> \+\ze\t<CR>
" find full-width punctuation marks
nnoremap <silent> <Leader>f. /\v(\.<Bar>．<Bar>。)<CR>
xnoremap <silent> <Leader>f. /\v(\.<Bar>．<Bar>。)<CR>
onoremap <silent> <Leader>f. /\v(\.<Bar>．<Bar>。)<CR>
nnoremap <silent> <Leader>f, /\v(,<Bar>，<Bar>、)<CR>
xnoremap <silent> <Leader>f, /\v(,<Bar>，<Bar>、)<CR>
onoremap <silent> <Leader>f, /\v(,<Bar>，<Bar>、)<CR>
nnoremap <silent> <Leader>f! /\v(!<Bar>！)<CR>
xnoremap <silent> <Leader>f! /\v(!<Bar>！)<CR>
onoremap <silent> <Leader>f! /\v(!<Bar>！)<CR>
nnoremap <silent> <Leader>f? /\v(\?<Bar>？)<CR>
xnoremap <silent> <Leader>f? /\v(\?<Bar>？)<CR>
onoremap <silent> <Leader>f? /\v(\?<Bar>？)<CR>
" NERDTreeFind
nnoremap <silent> <Leader>ff :NERDTreeFind<CR>

" text objects
xnoremap <silent> al <Esc>0v$
onoremap <silent> al :<C-u>normal! 0v$<CR>
xnoremap <silent> il <Esc>^vg_
onoremap <silent> il :<C-u>normal! ^vg_<CR>
xnoremap <silent> a, gg0oG$
onoremap <silent> a, :<C-u>exe "normal! m`"<Bar>keepjumps normal! ggVG<CR>

" vim-sandwich
nmap s <Nop>
xmap s <Nop>

" 3-way merge
nnoremap <silent> <Leader>1 :diffget LOCAL<CR>
nnoremap <silent> <Leader>2 :diffget BASE<CR>
nnoremap <silent> <Leader>3 :diffget REMOTE<CR>

""""""""""
"  Misc  "
""""""""""
let g:tex_flavor='latex'

" See :h :DiffOrig
command! DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
  \ | wincmd p | diffthis

" QuickFix "
au vimrc QuickfixCmdPost [^lA-Z]* botright cwindow
au vimrc QuickfixCmdPost l* botright lwindow

let s:has_rg = executable('rg')
if s:has_rg
  set grepprg=rg\ --vimgrep\ --hidden
endif

" FZF "
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }

command! -bang Compilers
  \ call vimrc#fzf_compilers(0, <bang>0)
command! -bang BCompilers
  \ call vimrc#fzf_compilers(1, <bang>0)
if s:has_rg
  command! -bang -nargs=* Grep
    \ call fzf#vim#grep('rg --vimgrep --color=always '.shellescape(<q-args>), 1, <bang>0)
else
  command! -bang -nargs=* Grep
    \ call fzf#vim#grep('grep -r --line-number '.shellescape(<q-args>).' *', 0, <bang>0)
endif

" airline "
let g:airline_skip_empty_sections=1
if $USE_POWERLINE
  let g:airline_powerline_fonts=1
endif

" indentLine "
let g:indentLine_enabled=0
let g:indentLine_setColors=0
let g:indentLine_concealcursor=''

" markbar "
let g:markbar_enable_peekaboo=v:false

" undotree "
let g:undotree_WindowLayout=2
